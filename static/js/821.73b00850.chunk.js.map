{"version":3,"file":"static/js/821.73b00850.chunk.js","mappings":"gLAKO,MA8CP,EA9CwBA,IAEtB,MAAMC,EAAWC,EAAAA,OAAa,MAExBC,EAAYD,EAAAA,OAAa,OACzB,QAAEE,EAAO,QAAEC,GAAYL,EAkC7B,OAhCAE,EAAAA,WAAgB,KAEd,IAAKC,EAAUG,QAAS,CACtB,MAAMC,EAAeN,EAASK,QAC9B,IAAKC,EACH,OAGF,MAAMC,EAAUL,EAAUG,SAAUG,EAAAA,EAAAA,GAAQF,EAAcH,GAAS,KACjEK,EAAAA,EAAQC,IAAI,oDACZL,GAAWA,EAAQG,EAAO,GAG9B,CAGE,GAED,CAACJ,EAASH,EAAUI,IAGvBH,EAAAA,WAAgB,KACd,MAAMM,EAASL,EAAUG,QAEzB,MAAO,KACDE,IACFA,EAAOG,UACPR,EAAUG,QAAU,KACtB,CACD,GACA,CAACH,KAGFS,EAAAA,EAAAA,KAAA,OAAK,qBAAeC,UAClBD,EAAAA,EAAAA,KAAA,SAAOE,IAAKb,EAAUc,UAAU,oCAC5B,EC4BV,EAvEcC,KACZ,MAAMb,EAAYD,EAAAA,OAAa,MA0C/B,OACEe,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUF,SAAA,EACvBD,EAAAA,EAAAA,KAAA,OAAKG,UAAU,QAAOF,UACpBD,EAAAA,EAAAA,KAACM,EAAO,CAACd,QAzCQ,CAErBe,UAAU,EAEVC,UAAU,EAEVC,YAAY,EAEZC,OAAO,EAEPC,QAAS,CACP,CAEEC,IAAK,mBAELC,KAAM,eA0B4BpB,QApBbG,IACzBL,EAAUG,QAAUE,EAGpBA,EAAOkB,GAAG,kBAAkB,KAC1BC,QAAQjB,IAAI,6CAAU,IAGxBF,EAAOkB,GAAG,SAAS,KACjBC,QAAQjB,IAAI,6FAAkB,IAGhCF,EAAOkB,GAAG,WAAW,KACnBC,QAAQjB,IAAI,qEAAc,GAC1B,OASAE,EAAAA,EAAAA,KAAA,OAAKG,UAAU,UAASF,UAUtBD,EAAAA,EAAAA,KAAA,OAAKgB,MAAM,OAAMf,SAxDN,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAyD3BgB,KAAKC,IACblB,EAAAA,EAAAA,KAAA,OAAKgB,MAAM,YAAWf,UACpBD,EAAAA,EAAAA,KAAA,KAAGmB,KAAK,SAAQlB,SAAEiB,cAKtB,C","sources":["pages/movie/videoPlayer/VideoJS.jsx","pages/movie/Movie.jsx"],"sourcesContent":["import React from \"react\";\nimport videojs from \"video.js\";\n// 记得引用css文件！\nimport \"video.js/dist/video-js.css\";\n\nexport const VideoJS = (props) => {\n  // video标签的引用Hook\n  const videoRef = React.useRef(null);\n  // 播放器实例的引用Hook\n  const playerRef = React.useRef(null);\n  const { options, onReady } = props;\n\n  React.useEffect(() => {\n    // 确保video.js的播放器实例player仅被初始化一次，否则会报错\n    if (!playerRef.current) {\n      const videoElement = videoRef.current;\n      if (!videoElement) {\n        return;\n      }\n\n      const player = (playerRef.current = videojs(videoElement, options, () => {\n        videojs.log(\"播放器准备就绪！\");\n        onReady && onReady(player);\n      }));\n      // 当props发生变化时，可以对已经存在的player实例作一些操作，如：\n    } else {\n      // const player = playerRef.current;\n      // player.autoplay(options.autoplay);\n      // player.src(options.sources);\n    }\n  }, [options, videoRef, onReady]);\n\n  // 控件被unmount卸载的时候，记得要对player实例执行反初始化dispose\n  React.useEffect(() => {\n    const player = playerRef.current;\n\n    return () => {\n      if (player) {\n        player.dispose();\n        playerRef.current = null;\n      }\n    };\n  }, [playerRef]);\n\n  return (\n    <div data-vjs-player>\n      <video ref={videoRef} className=\"video-js vjs-big-play-centered\" />\n    </div>\n  );\n};\n\nexport default VideoJS;\n","import React from \"react\";\nimport \"./Movie.scss\";\nimport VideoJS from \"./videoPlayer/VideoJS\";\n\nconst Movie = () => {\n  const playerRef = React.useRef(null);\n\n  const episodes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n  const videoJsOptions = {\n    // 自动播放：为true时，加载完毕自动播放\n    autoplay: true,\n    // 播放器子控件是否显示：为true时显示暂停、播放速率等按钮\n    controls: true,\n    // 响应性：为true时，播放视频进度条会自动移动\n    responsive: true,\n    // 流式布局：为true时尽可能大得填满父标签的剩余空间\n    fluid: true,\n    // 视频源\n    sources: [\n      {\n        // 视频文件的路径，可以是一个前端相对路径、后台视频文件URL、直播源等\n        src: \"./assets/dog.mp4\",\n        // 视频源类型\n        type: \"video/mp4\",\n      },\n    ],\n  };\n\n  // 播放器实例化完成后的事件动作，注意！不是视频加载成功\n  const handlePlayerReady = (player) => {\n    playerRef.current = player;\n    // 播放器的子事件在这里定义\n\n    player.on(\"canplaythrough\", () => {\n      console.log(\"视频加载完成！\");\n    });\n\n    player.on(\"error\", () => {\n      console.log(`视频文件加载失败，请稍后重试！`);\n    });\n\n    player.on(\"stalled\", () => {\n      console.log(`网络异常，请稍后重试！`);\n    });\n  };\n\n  return (\n    <div className=\"therator\">\n      <div className=\"video\">\n        <VideoJS options={videoJsOptions} onReady={handlePlayerReady} />\n      </div>\n\n      <div className=\"episode\">\n        {/* <h3>Episodes</h3> */}\n        {/* <ul>\n          {episodes.map((episode) => (\n            <div class=\"child-box\">\n            <a href=\"\">{episode}</a>\n          </div>\n          ))}\n        </ul> */}\n\n        <div class=\"main\">\n          {episodes.map((episode) => (\n            <div class=\"child-box\">\n              <a href=\"#movie\">{episode}</a>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Movie;\n"],"names":["props","videoRef","React","playerRef","options","onReady","current","videoElement","player","videojs","log","dispose","_jsx","children","ref","className","Movie","_jsxs","VideoJS","autoplay","controls","responsive","fluid","sources","src","type","on","console","class","map","episode","href"],"sourceRoot":""}